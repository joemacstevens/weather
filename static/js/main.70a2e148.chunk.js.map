{"version":3,"sources":["components/Search.jsx","components/Today.jsx","components/Hourly.jsx","components/Daily.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","address","setState","updateName","name","city","handleSelect","geocodeByAddress","then","results","formatted_address","getLatLng","latlng","location","catch","error","console","state","react_default","a","createElement","dist_default","value","searchOptions","type","onChange","onSelect","_ref","getInputProps","suggestions","getSuggestionItemProps","loading","className","placeholder","map","suggestion","active","description","_this2","onClick","event","update","src","alt","search","locationName","searchInput","Component","Today","styles","opacity","getTime","time","moment","unix","format","getFTemp","temp","Math","round","day","concat","current","weather","icon","includes","Fragment","style","sky","id","getIcon","main","temp_max","temp_min","sys","sunrise","sunset","Hourly","items","forecast","hour","key","ts","code","Daily","daily","bitApiKey","App","hourly","city_name","updateSearch","bind","assertThisInitialized","updateLocation","searching","lat","lng","fetch","response","json","data","slice","_this3","toggleForecast","_this4","react_motion","defaultStyle","spring","stiffness","damping","interpolatedStyle","components_Today","components_Hourly","components_Daily","components_Search","showCurrent","showForecastToggle","showHourly","showDaily","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70a2e148.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PlacesAutocomplete, {geocodeByAddress,getLatLng} from 'react-places-autocomplete';\n\nclass Search extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {address: '', city:''}\n    }\n    \n    handleChange = address => {\n        this.setState({ address });\n    }\n\n    updateName = name => {\n        this.setState({city: name});\n    }\n\n    handleSelect = address => {\n        geocodeByAddress(address)\n        .then(results => {\n            this.updateName(results[0].formatted_address)\n            return getLatLng(results[0])\n        })\n        .then(latlng => this.props.location(latlng))\n        .catch(error => console.error('Error', error));\n    }\n\n    searchInput(props){\n        return (\n            <PlacesAutocomplete \n                value={this.state.address}\n                searchOptions={{type:['cities']}}\n                onChange={this.handleChange}\n                onSelect={this.handleSelect}>\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading}) => (\n                    <nav className=\"search-input\">\n                    <input {...getInputProps({\n                        className: \"search-input\",\n                        placeholder: \"Search For Your City\" \n                    })}/>\n                    <div className=\"autocomplete-dropdown-container\">\n                        {loading && <div>Loading...</div>}\n                        {suggestions.map(suggestion => {\n                        const className = suggestion.active\n                        ? 'suggestion-item--active'\n                        : 'suggestion-item';\n                        return (\n                        <div\n                        {...getSuggestionItemProps(suggestion, {\n                        className\n                        })}\n                        >\n                        <span>{suggestion.description}</span>\n                        </div>\n                        );\n                    })}\n                    </div>\n                    </nav>\n                )}\n            </PlacesAutocomplete>\n\n        )\n    }\n\n    locationName(props){\n        return(\n            <header className=\"location\" onClick={event => this.props.update()}>\n                <button className=\"search-trigger\"><img className=\"icon\" src=\"images/search-location.svg\" alt=\"\" /></button>\n                <span className=\"location-name\">{this.props.city}</span>\n            </header>\n        )\n    }\n\n    render() {\n       if(this.props.search){\n          \n        return (\n            this.locationName()  \n     )\n       } else {\n        return (\n            \n            this.searchInput()  \n     )\n       }\n\n    }\n}\n\nexport default Search","import React from 'react';\nimport moment from 'moment';\nimport {Motion, spring} from 'react-motion';\n\n\nconst Today = (props) => {\n    \n    let styles = {\n        opacity: props.opacity\n    }\n\n    function getTime(time){\n        return moment.unix(time).format(\"h:mm\")\n    }\n\n    function getFTemp(temp) {\n        return Math.round(((temp-273.15)*1.8)+32)\n    }\n\n    function getIcon(){\n        const sky = `icon wi wi-owm-${props.current.weather[0].icon.includes(\"d\") ? \"day\" : \"night\"}-${props.current.weather[0].id}`;\n        return <i className={sky}></i>;\n    }\n\n    const day = `${props.current.weather[0].icon.includes(\"d\") ? \"day\" : \"night\"}`;\n\n    return (\n        <React.Fragment>\n        <div className=\"date\" style={styles}>\n        <div className=\"weather-type-name\">\n        {getIcon()}\n        <span className=\"weather-type-name\">{props.current.weather[0].main}</span>\n        </div>\n            </div>\n            <div className={`now ${day}`} style={styles}>\n            <span className=\"temp\">{getFTemp(props.current.main.temp)}</span>\n        </div>\n\n        <div className={`conditions ${day}`}>\n\n        <div className=\"high range\">\n        <i className=\"icon wi wi-direction-up\"></i\n        ><span className=\"temp\">{getFTemp(props.current.main.temp_max)}</span>\n        </div>\n        <div className=\"low range\">\n        <i className=\"icon wi wi-direction-down\"></i>\n        <span className=\"temp\">{getFTemp(props.current.main.temp_min)}</span>\n        </div>\n\n        <div className=\"sunrise range\">\n        <i className=\"icon wi wi-sunrise\"></i>\n        <span>{getTime(props.current.sys.sunrise)}</span>\n        </div>\n\n        <div className=\"sunset range\">\n        <i className=\"icon wi wi-sunset\"></i>\n        <span>{getTime(props.current.sys.sunset)}</span>\n        </div>\n\n        </div>\n        </React.Fragment>\n    )\n}\n\nexport default Today","import React from 'react';\nimport moment from 'moment';\n\nconst Hourly = (props) => {\n\n    function getTime(time){\n        return moment.unix(time).format(\"ha\")\n    }\n\n    function getFTemp(temp) {\n        return Math.round((temp*1.8)+32)\n    }\n\n    function getIcon(weather){\n        const sky = `icon wi wi-owm-${weather.icon.includes(\"d\") ? \"day\" : \"night\"}-${weather.code}`;\n        return <i className={sky}></i>;\n    }\n\n    function getDay(weather){\n        const day = `${weather.icon.includes(\"d\") ? \"day\" : \"night\"}`;\n        return day;\n    }\n\n    const items = props.forecast.map(hour => \n        <div className={`hourly ${getDay(hour.weather)}`} key={hour.ts}>\n            <span className=\"temp\">{getFTemp(hour.temp)}</span>\n            {getIcon(hour.weather)}\n            <span className=\"hour\">{getTime(hour.ts)}</span>\n        </div>\n    );\n\n    return (\n        <React.Fragment>\n        {items}\n       </React.Fragment>\n\n    )\n} \n\nexport default Hourly","import React from 'react';\nimport moment from 'moment';\n\nconst Daily = (props) => {\n\n    function getTime(time){\n        return moment.unix(time).format(\"ddd\")\n    }\n\n    function getFTemp(temp) {\n        return Math.round((temp*1.8)+32)\n    }\n\n    function getIcon(weather){\n        const sky = `icon wi wi-owm-${weather.icon.includes(\"d\") ? \"day\" : \"night\"}-${weather.code}`;\n        return <i className={sky}></i>;\n    }\n\n    function getDay(weather){\n        const day = `${weather.icon.includes(\"d\") ? \"day\" : \"night\"}`;\n        return day;\n    }\n\n    return (\n        <React.Fragment>\n            {props.forecast.map(daily => \n                <div className={`daily ${getDay(daily.weather)}`} key={daily.ts}>\n                    <span className=\"temp\">{getFTemp(daily.temp)}</span>\n                    {getIcon(daily.weather)}\n                    <span className=\"hour\">{getTime(daily.ts)}</span>\n                </div>\n            )}\n       </React.Fragment>\n    )\n} \n\nexport default Daily","import React, { Component } from 'react';\nimport Search from './components/Search';\nimport Today from './components/Today';\nimport Hourly from './components/Hourly';\nimport Daily from './components/Daily';\nimport {Motion, spring} from 'react-motion';\nimport './css/app.css';\n\n\nconst bitApiKey = \"4834f949ab2c464cae3fac3dc7d4e84c\";\nconst openWeatherApiKey = \"5689c2a2ebdff84b5f35b6445ec0710f\";\nconst openWeatherUrl = \"https://api.openweathermap.org/data/2.5/weather?\";\nconst bitUrl = \"https://api.weatherbit.io/v2.0/forecast/hourly?\";\nconst forecastUrl = \"https://api.weatherbit.io/v2.0/forecast/daily?\";\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        search: false,\n        current: null,\n        hourly: null,\n        daily: null,\n        city_name: null,\n        forecast: \"hourly\"\n      }\n\n      this.updateSearch = this.updateSearch.bind(this);\n      this.updateLocation = this.updateLocation.bind(this);\n\n  }\n\n  updateSearch(){\n\n    let searching = this.state.search === true ? false : true;\n    this.setState({\n      search: searching,\n      hourly: null,\n      daily: null,\n    })\n\n  }\n\n  updateLocation(location){\n    const current = `${openWeatherUrl}lat=${location.lat}&lon=${location.lng}&APPID=${openWeatherApiKey}`\n    const hourly = `${bitUrl}lat=${location.lat}&lon=${location.lng}&key=${bitApiKey}`\n    const daily = `${forecastUrl}lat=${location.lat}&lon=${location.lng}&key=${bitApiKey}`\n    \n    fetch(current)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          current: data,\n          search: true,\n        })\n      })\n\n      fetch(hourly)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          hourly : data.data.slice(0,12),\n          city_name: data.city_name\n        })\n      })\n\n      fetch(daily)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          daily : data.data.slice(1,13)\n        })\n      })\n\n  }\n\n  toggleForecast(){\n    let forecast = (this.state.forecast === \"hourly\") ? \"daily\" : \"hourly\";\n    this.setState({\n      forecast: forecast\n    })\n  }\n\n  showForecastToggle(){\n    if(this.state.current){\n      return <nav className=\"select_forecast\">\n        <button onClick={() => this.toggleForecast()} className={(this.state.forecast === \"hourly\") ? \"selected\" : \"\"}>Hourly</button>\n        <button onClick={() => this.toggleForecast()} className={(this.state.forecast === \"daily\") ? \"selected\" : \"\"}>Daily</button>\n        </nav>\n    } else {\n      return \"\"\n    }\n  }\n\n  showCurrent(){\n    if(this.state.search){\n      return (\n        <Motion defaultStyle={{opacity:0}}\n        style={{ opacity: spring(1, { stiffness: 60, damping: 10 }) }}>\n          {interpolatedStyle => <Today opacity={interpolatedStyle.opacity} current={this.state.current}/>}\n        </Motion>);\n    } else {\n      return \"\";\n    }\n  }\n\n  showHourly(){\n    if(this.state.hourly && this.state.forecast === \"hourly\"){\n      return <Hourly forecast={this.state.hourly}/>;\n    } else {\n      return \"\";\n    }\n  }\n\n  showDaily(){\n    if(this.state.daily && this.state.forecast === \"daily\"){\n      return <Daily forecast={this.state.daily}/>;\n    } else {\n      return \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App app\">\n          <div className=\"container\">\n            <Search search={this.state.search} update={this.updateSearch} location={this.updateLocation} current={this.state.current} city={this.state.city_name}/>\n            {this.showCurrent()}\n            {this.showForecastToggle()}\n            <section className=\"upcoming\">\n              {this.showHourly()}\n              {this.showDaily()}\n            </section>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}